{"version":3,"sources":["components/ArtistTable.js","components/App.js","serviceWorker.js","index.js"],"names":["ArtistTable","state","posts","isLoading","error","axios","then","response","setState","convertData","data","catch","result","item","albums","length","album","push","this","getArtistsInfo","Fragment","columns","Header","accessor","defaultPageSize","pageSizeOptions","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"sTAoKeA,G,iNArJbC,MAAQ,CACNC,MAAO,GACPC,WAAW,EACXC,MAAO,M,gFAKS,IAAD,OAEfC,IAAM,iCAGHC,MAAK,SAAAC,GACJ,EAAKC,SAAS,CAEZN,MAAOO,EAAYF,EAASG,MAE5BP,WAAW,OAKdQ,OAAM,SAAAP,GAAK,OAAI,EAAKI,SAAS,CAAEJ,QAAOD,WAAW,OAIpD,IAAMM,EAAc,SAACC,GACnB,IAAIE,EAAS,GADe,uBAG5B,IAAI,IAAJ,IAAgBF,EAAhB,+CAAqB,CAAC,IAAdG,EAAa,QACfX,EAAQ,GAEZ,GAAGW,EAAKC,OAAOC,OAAO,CACtB,IAAMC,EAAQH,EAAKC,cACZD,EAAKC,OAFU,2BAIpB,YAAeE,EAAf,+CAAsB,CACtBd,EADsB,QAEtBU,EAAOK,KAAP,eAAgBJ,EAAhB,GAAwBX,KANJ,+FAUXW,EAAKC,OACZF,EAAOK,KAAKJ,IAjBU,kFAoB5B,OAAOD,K,0CAQTM,KAAKC,mB,+BAIG,IAAD,EACsBD,KAAKjB,MAA1BE,EADD,EACCA,UAAWD,EADZ,EACYA,MA4DrB,OAEE,kBAAC,IAAMkB,SAAP,KACE,kDACEjB,EAaE,4CAXF,kBAAC,IAAD,CAEEO,KAAMR,EAGNmB,QArEU,CAAC,CAEfC,OAAQ,cAERD,QAAS,CACP,CAEEC,OAAQ,YAGRC,SAAU,MAGZ,CAEED,OAAQ,cAGRC,SAAU,QAGZ,CAEED,OAAQ,SAGRC,SAAU,YAKhB,CAEED,OAAQ,SAERD,QAAS,CACP,CAEEC,OAAQ,QAGRC,SAAU,SAGZ,CAEED,OAAQ,mBAGRC,SAAU,cAsBVC,gBAAiB,EACjBC,gBAAiB,CAAC,EAAG,EAAG,U,GAzIRC,cCCXC,MARf,WACE,OAEI,kBAAC,EAAD,OCIcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCNNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjC,MAAK,SAAAkC,GACJA,EAAaC,gBAEd9B,OAAM,SAAAP,GACLsC,QAAQtC,MAAMA,EAAMuC,c","file":"static/js/main.b4a37c33.chunk.js","sourcesContent":["// tag::react-library[]\r\nimport React, { Component } from \"react\";\r\n// end::react-library[]\r\n// tag::axios-library[]\r\nimport axios from \"axios\";\r\n// end::axios-library[]\r\n// tag::react-table[]\r\nimport ReactTable from 'react-table-6';\r\nimport 'react-table-6/react-table.css';\r\n// end::react-table[]\r\n\r\n// tag::class[]\r\nclass ArtistTable extends Component {\r\n// end::class[]\r\n  // tag::state-object[]\r\n  state = {\r\n    posts: [],\r\n    isLoading: true,\r\n    error: null,\r\n  };\r\n  // end::state-object[]\r\n\r\n  // tag::get-posts[]\r\n  getArtistsInfo() {\r\n    // tag::axios[]\r\n    axios(\"http://localhost:9080/artists\")\r\n    // end::axios[]\r\n      // tag::then-method[]\r\n      .then(response => {\r\n        this.setState({\r\n          // tag::data[]\r\n          posts: convertData(response.data),\r\n          // end::data[]\r\n          isLoading: false\r\n        });\r\n      // end::then-method[]\r\n      })\r\n      // tag::error-handling[]\r\n      .catch(error => this.setState({ error, isLoading: false }));\r\n      // end::error-handling[]\r\n      \r\n    // tag::convert-data[]\r\n    const convertData = (data) => {\r\n      let result = [];\r\n\r\n      for(let item of data){\r\n        let posts = {};\r\n        \r\n        if(item.albums.length){\r\n        const album = item.albums;\r\n        delete item.albums;\r\n\r\n          for (let it of album) {\r\n          posts = it;\r\n          result.push({...item,...posts});\r\n          }\r\n\r\n          } else {\r\n            delete item.albums;\r\n            result.push(item);\r\n          }\r\n      }\r\n      return result;\r\n    }\r\n    // end::convert-data[]\r\n  }\r\n  // end::get-posts[]\r\n\r\n  // tag::mount-posts[]\r\n  componentDidMount() {\r\n    this.getArtistsInfo();\r\n  }\r\n  // end::mount-posts[]\r\n  // tag::render-posts[]\r\n  render() {\r\n    const { isLoading, posts } = this.state;\r\n    // tag::table-info[]\r\n    const columns = [{\r\n      // tag::header-artist[]\r\n      Header: 'Artist Info',\r\n      // end::header-artist[]\r\n      columns: [\r\n        {\r\n          // tag::header-ID[]\r\n          Header: \"Artist ID\",\r\n          // end::header-ID[]\r\n          // tag::accessor-ID[]\r\n          accessor: \"id\"\r\n          // end::accessor-ID[]\r\n        },\r\n        {\r\n          // tag::header-name[]\r\n          Header: \"Artist Name\",\r\n          // end::header-name[]\r\n          // tag::accessor-name[]\r\n          accessor: \"name\"\r\n          // end::accessor-name[]\r\n        },\r\n        {\r\n          // tag::header-genres[]\r\n          Header: \"Genres\",\r\n          // end::header-genres[]\r\n          // tag::accessor-genres[]\r\n          accessor: \"genres\",\r\n          // end::accessor-genres[]\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      // tag::header-albums[]\r\n      Header: 'Albums',\r\n      // end::header-albums[]\r\n      columns: [\r\n        {\r\n          // tag::header-title[]\r\n          Header: \"Title\",\r\n          // end::header-title[]\r\n          // tag::accessor-title[]\r\n          accessor: \"title\",\r\n          // end::accessor-title[]\r\n        },\r\n        {\r\n          // tag::header-tracks[]\r\n          Header: \"Number of Tracks\",\r\n          // end::header-tracks[]\r\n          // tag::accessor-tracks[]\r\n          accessor: \"ntracks\",\r\n          // end::accessor-tracks[]\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n  // end::table-info[]\r\n\r\n  // tag::return-table[]\r\n  return (\r\n    // tag::react-fragment[]\r\n    <React.Fragment>\r\n      <h2>Artist Web Service</h2>\r\n      {!isLoading ? (\r\n        // tag::table[]\r\n        <ReactTable\r\n          // tag::posts[]\r\n          data={posts}\r\n          // end::posts[]\r\n          // tag::columns[]\r\n          columns={columns}\r\n          // end::columns[]\r\n          defaultPageSize={4}\r\n          pageSizeOptions={[4, 5, 6]}\r\n        />) : (\r\n        // end::table[]\r\n          <p>Loading .....</p>\r\n        )}\r\n    </React.Fragment>\r\n    // end::react-fragment[]\r\n    );\r\n    // end::return-table[]\r\n  }\r\n  // end::render-posts[]\r\n}\r\n// end::element[]\r\n\r\n// tag::export-artisttable[]\r\nexport default ArtistTable;\r\n// end::export-artisttable[]","import React from 'react';\nimport '../styles/App.css';\nimport ArtistTable from './ArtistTable';\n\n\nfunction App() {\n  return (\n    // tag::react-component[]\n      <ArtistTable/>\n    // end::react-component[]\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// tag::import-react[]\nimport React from 'react';\n// end::import-react[]\n// tag::react-dom[]\nimport ReactDOM from 'react-dom';\n// end::react-dom[]\nimport './styles/index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n// tag::dom-render[]\nReactDOM.render(<App />, document.getElementById('root'));\n// end::dom-render[]\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\n// tag::service-worker[]\nserviceWorker.unregister();\n// end::service-worker[]\n"],"sourceRoot":""}