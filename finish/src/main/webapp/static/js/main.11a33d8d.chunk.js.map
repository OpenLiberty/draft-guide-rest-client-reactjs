{"version":3,"sources":["Components/Fetchdata.js","App.js","serviceWorker.js","index.js"],"names":["Fetchdata","state","posts","isLoading","error","axios","then","response","setState","convertData","data","console","log","catch","result","item","b","albums","length","a","push","this","getPosts","Fragment","columns","Header","accessor","defaultPageSize","pageSizeOptions","Component","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"oTAqKeA,E,4MAtJbC,MAAQ,CACNC,MAAO,GACPC,WAAW,EACXC,MAAO,M,yDAKG,IAAD,OAETC,IAAM,iCAGHC,MAAK,SAAAC,GACJ,EAAKC,SAAS,CAEZN,MAAOO,EAAYF,EAASG,MAE5BP,WAAW,IAGfQ,QAAQC,IAAIL,MAGXM,OAAM,SAAAT,GAAK,OAAI,EAAKI,SAAS,CAAEJ,QAAOD,WAAW,OAIpD,IAAMM,EAAc,SAACC,GACnB,IAD4B,EACxBI,EAAS,GADe,cAGZJ,GAHY,IAG5B,IAAI,EAAJ,qBAAqB,CAAC,IAAdK,EAAa,QACfC,EAAI,GAER,GAAGD,EAAKE,OAAOC,OAAO,CACtB,IAAMC,EAAIJ,EAAKE,cACRF,EAAKE,OAFU,oBAILE,GAJK,IAIpB,2BAAkB,CAClBH,EADkB,QAElBF,EAAOM,KAAP,2BAAgBL,GAAQC,KANJ,2CAUXD,EAAKE,OACZH,EAAOM,KAAKL,IAjBU,8BAoB5B,OAAOD,K,0CAQTO,KAAKC,a,+BAIG,IAAD,EACsBD,KAAKpB,MAA1BE,EADD,EACCA,UAAWD,EADZ,EACYA,MA4DnB,OAEE,kBAAC,IAAMqB,SAAP,KACE,kDACEpB,EAaE,4CAXF,kBAAC,IAAD,CAEEO,KAAMR,EAGNsB,QArEQ,CAAC,CAEbC,OAAQ,cAERD,QAAS,CACP,CAEEC,OAAQ,YAGRC,SAAU,MAGZ,CAEED,OAAQ,cAGRC,SAAU,QAGZ,CAEED,OAAQ,SAGRC,SAAU,YAKlB,CAEED,OAAQ,SAERD,QAAS,CACP,CAEEC,OAAQ,QAGRC,SAAU,SAGZ,CAEED,OAAQ,mBAGRC,SAAU,cAsBRC,gBAAiB,EACjBC,gBAAiB,CAAC,EAAG,GAAI,W,GA1IbC,aCQTC,MARf,WACE,OACE,yBAAKC,UAAU,OACf,kBAAC,EAAD,QCHgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtC,MAAK,SAAAuC,GACJA,EAAaC,gBAEdjC,OAAM,SAAAT,GACLO,QAAQP,MAAMA,EAAM2C,c","file":"static/js/main.11a33d8d.chunk.js","sourcesContent":["// tag::react-library[]\r\nimport React, { Component } from \"react\";\r\n// end::react-library[]\r\n// tag::axios-library[]\r\nimport axios from \"axios\";\r\n// end::axios-library[]\r\n// tag::react-table[]\r\nimport { Table } from \"react-bootstrap\";\r\nimport ReactTable from 'react-table-6';\r\n// end::react-table[]\r\n\r\n// tag::class[]\r\nclass Fetchdata extends Component {\r\n// end::class[]\r\n  // tag::state-object[]\r\n  state = {\r\n    posts: {},\r\n    isLoading: true,\r\n    error: null,\r\n  };\r\n  // end::state-object[]\r\n\r\n  // tag::get-posts[]\r\n  getPosts() {\r\n    // tag::axios[]\r\n    axios(\"http://localhost:9080/artists\")\r\n    // end::axios[]\r\n      // tag::then-method[]\r\n      .then(response => {\r\n        this.setState({\r\n          // tag::data[]\r\n          posts: convertData(response.data),\r\n          // end::data[]\r\n          isLoading: false\r\n        });\r\n      // end::then-method[]\r\n      console.log(response);\r\n      })\r\n      // tag::error-handling[]\r\n      .catch(error => this.setState({ error, isLoading: false }));\r\n      // end::error-handling[]\r\n      \r\n  // tag::convert-data[]\r\n    const convertData = (data) => {\r\n      let result = [];\r\n\r\n      for(let item of data){\r\n        let b = {};\r\n        \r\n        if(item.albums.length){\r\n        const a = item.albums;\r\n        delete item.albums;\r\n\r\n          for (let it of a) {\r\n          b = it;\r\n          result.push({...item,...b});\r\n          }\r\n\r\n          } else {\r\n            delete item.albums;\r\n            result.push(item);\r\n          }\r\n      }\r\n      return result;\r\n    }\r\n    // end::convert-data[]\r\n  }\r\n  // end::get-posts[]\r\n\r\n  // tag::mount-posts[]\r\n  componentDidMount() {\r\n    this.getPosts();\r\n  }\r\n  // end::mount-posts[]\r\n  // tag::render-posts[]\r\n  render() {\r\n    const { isLoading, posts } = this.state;\r\n    // tag::table-info[]\r\n    const columns = [{\r\n        // tag::header-artist[]\r\n        Header: 'Artist Info',\r\n        // end::header-artist[]\r\n        columns: [\r\n          {\r\n            // tag::header-ID[]\r\n            Header: \"Artist ID\",\r\n            // end::header-ID[]\r\n            // tag::accessor-ID[]\r\n            accessor: \"id\"\r\n            // end::accessor-ID[]\r\n          },\r\n          {\r\n            // tag::header-name[]\r\n            Header: \"Artist Name\",\r\n            // end::header-name[]\r\n            // tag::accessor-name[]\r\n            accessor: \"name\"\r\n            // end::accessor-name[]\r\n          },\r\n          {\r\n            // tag::header-genres[]\r\n            Header: \"Genres\",\r\n            // end::header-genres[]\r\n            // tag::accessor-genres[]\r\n            accessor: \"genres\",\r\n            // end::accessor-genres[]\r\n          }\r\n        ]\r\n    },\r\n    {\r\n      // tag::header-albums[]\r\n      Header: 'Albums',\r\n      // end::header-albums[]\r\n      columns: [\r\n        {\r\n          // tag::header-title[]\r\n          Header: \"Title\",\r\n          // end::header-title[]\r\n          // tag::accessor-title[]\r\n          accessor: \"title\",\r\n          // end::accessor-title[]\r\n        },\r\n        {\r\n          // tag::header-tracks[]\r\n          Header: \"Number of Tracks\",\r\n          // end::header-tracks[]\r\n          // tag::accessor-tracks[]\r\n          accessor: \"ntracks\",\r\n          // end::accessor-tracks[]\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n  // end::table-info[]\r\n\r\n    // tag::return-table[]\r\n    return (\r\n      // tag::react-fragment[]\r\n      <React.Fragment>\r\n        <h2>Artist Web Service</h2>\r\n        {!isLoading ? (\r\n          // tag::table[]\r\n          <ReactTable\r\n            // tag::posts[]\r\n            data={posts}\r\n            // end::posts[]\r\n            // tag::columns[]\r\n            columns={columns}\r\n            // end::columns[]\r\n            defaultPageSize={6}\r\n            pageSizeOptions={[6, 12, 15]}\r\n          />) : (\r\n          // end::table[]\r\n            <p>Loading .....</p>\r\n          )}\r\n      </React.Fragment>\r\n      // end::react-fragment[]\r\n    // end::return-table[]\r\n    );\r\n  }\r\n  // end::render-posts[]\r\n}\r\n// end::element[]\r\n\r\n// tag::export-fetchdata[]\r\nexport default Fetchdata;\r\n// end::export-fetchdata[]","import React from 'react';\nimport './App.css';\nimport {\n  BrowserRouter,\n  Link,\n  Route,\n  Switch\n} from 'react-router-dom';\n// tag::import-fetchdata\nimport Fetchdata from './Components/Fetchdata';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n    <Fetchdata/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}