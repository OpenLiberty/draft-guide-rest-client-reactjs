{"version":3,"sources":["logo.svg","Components/Fetchdata.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Fetchdata","state","posts","isLoading","errors","loading","axios","then","response","setState","data","catch","error","this","getPosts","Fragment","columns","Header","accessor","defaultPageSize","pageSizeOptions","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"uJAAAA,EAAOC,QAAU,IAA0B,kC,sLCiE5BC,EA7Df,2MACEC,MAAQ,CACNC,MAAO,GACPC,WAAW,EACXC,OAAQ,KACRC,QAAS,gBALb,0EAQc,IAAD,OACTC,IAAM,iCACHC,MAAK,SAAAC,GACJ,EAAKC,SAAS,CACZP,MAAOM,EAASE,KAChBP,WAAW,OAGdQ,OAAM,SAAAC,GAAK,OAAI,EAAKH,SAAS,CAAEG,QAAOT,WAAW,SAhBxD,0CAoBIU,KAAKC,aApBT,+BAsBY,IAAD,EACsBD,KAAKZ,MAA1BE,EADD,EACCA,UAAWD,EADZ,EACYA,MAqBnB,OACE,kBAAC,IAAMa,SAAP,KACE,2CACEZ,EAOE,2BAAIU,KAAKZ,MAAMI,SANjB,kBAAC,IAAD,CACEK,KAAMR,EACNc,QA1BQ,CAAC,CACfC,OAAQ,SACRC,SAAU,MACT,CACDD,OAAQ,YACRC,SAAU,aAEZ,CACED,OAAQ,WACRC,SAAU,YAEZ,CACED,OAAQ,SACRC,SAAU,UAEZ,CACED,OAAQ,QACRC,SAAU,UAUJC,gBAAiB,EACjBC,gBAAiB,CAAC,EAAG,GAAI,WApDrC,GAA+BC,aCShBC,MARf,WACE,OACE,kBAAC,IAAMP,SAAP,KACE,kBAAC,EAAD,QCIcQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3B,MAAK,SAAA4B,GACJA,EAAaC,gBAEdzB,OAAM,SAAAC,GACLyB,QAAQzB,MAAMA,EAAM0B,c","file":"static/js/main.d135e506.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport { Table } from \"react-bootstrap\";\r\nimport ReactTable from 'react-table-6';\r\nexport class Fetchdata extends Component {\r\n  state = {\r\n    posts: {},\r\n    isLoading: true,\r\n    errors: null,\r\n    loading: \"Loading.....\"\r\n  };\r\n\r\n  getPosts() {\r\n    axios(\"http://192.168.0.13:9080/user\")\r\n      .then(response => {\r\n        this.setState({\r\n          posts: response.data,\r\n          isLoading: false\r\n        });\r\n      })\r\n      .catch(error => this.setState({ error, isLoading: false }));\r\n\r\n  }\r\n  componentDidMount() {\r\n    this.getPosts();\r\n  }\r\n  render() {\r\n    const { isLoading, posts } = this.state;\r\n    const columns = [{\r\n      Header: 'USerID',\r\n      accessor: 'id'\r\n    }, {\r\n      Header: 'FirstName',\r\n      accessor: 'firstName'\r\n    },\r\n    {\r\n      Header: 'LastName',\r\n      accessor: 'lastName'\r\n    },\r\n    {\r\n      Header: 'Gender',\r\n      accessor: 'gender'\r\n    },\r\n    {\r\n      Header: 'Email',\r\n      accessor: 'email'\r\n    }]\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <h2>Random Post</h2>\r\n        {!isLoading ? (\r\n          <ReactTable\r\n            data={posts}\r\n            columns={columns}\r\n            defaultPageSize={5}\r\n            pageSizeOptions={[5, 10, 15]}\r\n          />) : (\r\n            <p>{this.state.loading}</p>\r\n          )}\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Fetchdata;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Fetchdata from './Components/Fetchdata';\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <Fetchdata/>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}